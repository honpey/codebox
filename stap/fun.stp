probe begin {
	printf("hello world Begin\n")
}

/*

   1) 如何使用函数，函数的参数是如何获取的；返回值是怎么确定的；
   2) ｔａｓｋ的使用 @task(addr)　将ａｄｄｒ解释成内核ｔａｓｋ_struct 结构体
   3) pid2task transfer pid to task_struct
   4) 正常函数的返回值和非正常情况下返回值的差异； 

*/

function tracecomm() {
	printf("tracercomm\n")
}

%{
#include <linux/sched.h>
#include <linux/list.h>
%}
@__private30 function task_execname_by_pid:string (pid:long) %{
	struct task_struct *p;
	struct list_head *_p, *_n;
	list_for_each_safe(_p, _n, &current->tasks) {
		p = list_entry(_p, struct task_struct, tasks);
		if (p->pid == (int)STAP_ARG_pid) {
		//	STAP_RETURN("")
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "%s", p->comm);
		}
	}
//	STAP_RETURN("")
%}

function get_task_name:string (cur:long) {
//	printf("%s\n", cur)
	name = kernel_string(@task(cur)->comm)
	return name
}

probe kernel.function("submit_bio") {
	printf("%s(%d)\n", task_execname_by_pid(pid()), pid())
//	get_task_name(pid2task(pid()))
//	printf("%s\n", get_task_name(pid2task(9585)))
}

probe end {
	printf("hello world End")
}
